# Generated by Django 5.0.1 on 2024-02-05 16:21

import django.db.models.deletion
import water_meter.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Addresses',
            fields=[
                ('address_id', models.AutoField(primary_key=True, serialize=False)),
                ('town', models.CharField(blank=True, max_length=60, null=True)),
                ('address', models.CharField(blank=True, max_length=50, null=True)),
                ('apartment', models.IntegerField(blank=True, null=True)),
                ('house_type', models.CharField(blank=True, max_length=12, null=True)),
                ('meter_reading', models.IntegerField(blank=True, null=True)),
                ('images', models.CharField(blank=True, null=True)),
                ('address_status', models.CharField(blank=True, max_length=12, null=True)),
            ],
            options={
                'db_table': 'addresses',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email адрес')),
                ('username', models.CharField(blank=True, max_length=30, null=True, unique=True, verbose_name='Имя пользователя')),
                ('password', models.CharField(max_length=100, verbose_name='Пароль')),
                ('is_staff', models.BooleanField(default=False, verbose_name='Является ли пользователь менеджером?')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Является ли пользователь админом?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_groups', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_permissions', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'customUser',
                'managed': True,
            },
            managers=[
                ('objects', water_meter.models.NewUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='WaterMeterReading',
            fields=[
                ('water_meter_reading_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_creating', models.DateField(blank=True, null=True)),
                ('date_formation', models.DateField(blank=True, null=True)),
                ('date_completion', models.DateField(blank=True, null=True)),
                ('moderator', models.CharField(blank=True, max_length=50, null=True)),
                ('meter_status', models.CharField(blank=True, max_length=50, null=True)),
                ('id_user', models.ForeignKey(db_column='id_user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'watermeterreading',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Manytomany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(blank=True, null=True)),
                ('address_id', models.ForeignKey(db_column='address_id', on_delete=django.db.models.deletion.CASCADE, to='water_meter.addresses')),
                ('meter_id', models.ForeignKey(db_column='meter_id', on_delete=django.db.models.deletion.CASCADE, to='water_meter.watermeterreading')),
            ],
            options={
                'db_table': 'manytomany',
                'managed': True,
            },
        ),
    ]
